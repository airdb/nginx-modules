diff --git a/src/core/nginx.c b/src/core/nginx.c
index 9fcb0eb2..a3d14a28 100644
--- a/src/core/nginx.c
+++ b/src/core/nginx.c
@@ -33,7 +33,7 @@ static void ngx_unload_module(void *data);

 static ngx_conf_enum_t  ngx_debug_points[] = {
     { ngx_string("stop"), NGX_DEBUG_POINTS_STOP },
-    { ngx_string("abort"), NGX_DEBUG_POINTS_ABORT },
+    { ngx_string("abort"), les },
     { ngx_null_string, 0 }
 };

diff --git a/src/core/ngx_connection.h b/src/core/ngx_connection.h
index e4dfe587..9fb8a2d6 100644
--- a/src/core/ngx_connection.h
+++ b/src/core/ngx_connection.h
@@ -133,6 +133,7 @@ struct ngx_connection_s {
     ngx_listening_t    *listening;
 
     off_t               sent;
+    off_t               received;
 
     ngx_log_t          *log;
 
diff --git a/src/http/ngx_http.c b/src/http/ngx_http.c
index 3ab65237..7311db95 100644
--- a/src/http/ngx_http.c
+++ b/src/http/ngx_http.c
@@ -66,6 +66,11 @@ static ngx_int_t ngx_http_add_addrs6(ngx_conf_t *cf, ngx_http_port_t *hport,
     ngx_http_conf_addr_t *addr);
 #endif
 
+#if (T_NGX_INPUT_BODY_FILTER)
+static ngx_int_t ngx_http_dummy_input_body_filter(ngx_http_request_t *r,
+    ngx_buf_t *buf);
+#endif
+
 ngx_uint_t   ngx_http_max_module;
 
 
@@ -73,6 +78,10 @@ ngx_http_output_header_filter_pt  ngx_http_top_header_filter;
 ngx_http_output_body_filter_pt    ngx_http_top_body_filter;
 ngx_http_request_body_filter_pt   ngx_http_top_request_body_filter;
 
+#if (T_NGX_INPUT_BODY_FILTER)
+ngx_int_t  (*ngx_http_top_input_body_filter) (ngx_http_request_t *r,
+    ngx_buf_t *buf);
+#endif
 
 ngx_str_t  ngx_http_html_default_types[] = {
     ngx_string("text/html"),
@@ -216,6 +225,12 @@ ngx_http_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
     pcf = *cf;
     cf->ctx = ctx;
 
+#if (T_NGX_INPUT_BODY_FILTER)
+    /* init input body filter pointer */
+
+    ngx_http_top_input_body_filter = ngx_http_dummy_input_body_filter;
+#endif
+
     for (m = 0; cf->cycle->modules[m]; m++) {
         if (cf->cycle->modules[m]->type != NGX_HTTP_MODULE) {
             continue;
@@ -2077,3 +2092,13 @@ ngx_http_set_default_types(ngx_conf_t *cf, ngx_array_t **types,
 
     return NGX_OK;
 }
+
+#if (T_NGX_INPUT_BODY_FILTER)
+static ngx_int_t
+ngx_http_dummy_input_body_filter(ngx_http_request_t *r, ngx_buf_t *buf)
+{
+    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
+                   "http dummy input body filter");
+    return NGX_OK;
+}
+#endif
diff --git a/src/http/ngx_http.h b/src/http/ngx_http.h
index afab4f64..53e11d60 100644
--- a/src/http/ngx_http.h
+++ b/src/http/ngx_http.h
@@ -172,5 +172,8 @@ extern ngx_http_output_header_filter_pt  ngx_http_top_header_filter;
 extern ngx_http_output_body_filter_pt    ngx_http_top_body_filter;
 extern ngx_http_request_body_filter_pt   ngx_http_top_request_body_filter;
 
+#if (T_NGX_INPUT_BODY_FILTER)
+extern ngx_http_input_body_filter_pt     ngx_http_top_input_body_filter;
+#endif
 
 #endif /* _NGX_HTTP_H_INCLUDED_ */
diff --git a/src/http/ngx_http_core_module.h b/src/http/ngx_http_core_module.h
index d7985049..8b0c7e7a 100644
--- a/src/http/ngx_http_core_module.h
+++ b/src/http/ngx_http_core_module.h
@@ -506,6 +506,9 @@ ngx_int_t ngx_http_named_location(ngx_http_request_t *r, ngx_str_t *name);
 ngx_http_cleanup_t *ngx_http_cleanup_add(ngx_http_request_t *r, size_t size);
 
 
+typedef ngx_int_t (*ngx_http_input_body_filter_pt)
+    (ngx_http_request_t *r, ngx_buf_t *buf);
+
 typedef ngx_int_t (*ngx_http_output_header_filter_pt)(ngx_http_request_t *r);
 typedef ngx_int_t (*ngx_http_output_body_filter_pt)
     (ngx_http_request_t *r, ngx_chain_t *chain);
diff --git a/src/http/ngx_http_request.c b/src/http/ngx_http_request.c
index 2db7a627..f95441be 100644
--- a/src/http/ngx_http_request.c
+++ b/src/http/ngx_http_request.c
@@ -474,6 +474,7 @@ ngx_http_wait_request_handler(ngx_event_t *rev)
     }
 
     b->last += n;
+    c->received += n;
 
     if (hc->proxy_protocol) {
         hc->proxy_protocol = 0;
@@ -1451,6 +1452,7 @@ ngx_http_read_request_header(ngx_http_request_t *r)
     }
 
     r->header_in->last += n;
+    c->received += n;
 
     return n;
 }
@@ -2993,6 +2995,10 @@ ngx_http_set_keepalive(ngx_http_request_t *r)
         c->data = r;
 
         c->sent = 0;
+
+        /* bytes in the buffer have already been counted */
+        c->received = 0;
+
         c->destroyed = 0;
 
         if (rev->timer_set) {
@@ -3230,6 +3236,7 @@ ngx_http_keepalive_handler(ngx_event_t *rev)
     }
 
     c->sent = 0;
+    c->received = n;
     c->destroyed = 0;
 
     ngx_del_timer(rev);
@@ -3321,6 +3328,8 @@ ngx_http_lingering_close_handler(ngx_event_t *rev)
             return;
         }
 
+        c->received += n;
+
     } while (rev->ready);
 
     if (ngx_handle_read_event(rev, 0) != NGX_OK) {
diff --git a/src/http/ngx_http_request_body.c b/src/http/ngx_http_request_body.c
index c4f092e5..ba920e7a 100644
--- a/src/http/ngx_http_request_body.c
+++ b/src/http/ngx_http_request_body.c
@@ -1123,6 +1123,36 @@ ngx_http_request_body_save_filter(ngx_http_request_t *r, ngx_chain_t *in)
         return NGX_HTTP_INTERNAL_SERVER_ERROR;
     }
 
+#if (T_NGX_INPUT_BODY_FILTER)
+    {
+    ngx_int_t                  rc;
+    ngx_chain_t               *cl;
+
+    for (cl = in; cl; cl = cl->next) {
+        rc = ngx_http_top_input_body_filter(r, cl->buf);
+        if (rc != NGX_OK) {
+            if (rc > NGX_OK && rc < NGX_HTTP_SPECIAL_RESPONSE) {
+                ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
+                              "input filter: return code 1xx or 2xx "
+                              "will cause trouble and is converted to 500");
+            }
+
+            /**
+             * NGX_OK: success and continue;
+             * NGX_ERROR: failed and exit;
+             * NGX_AGAIN: not ready and retry later.
+             */
+
+            if (rc < NGX_HTTP_SPECIAL_RESPONSE && rc != NGX_AGAIN) {
+                rc = NGX_HTTP_INTERNAL_SERVER_ERROR;
+            }
+
+            return rc;
+        }
+    }
+    }
+#endif
+
     if (r->request_body_no_buffering) {
         return NGX_OK;
     }
diff --git a/src/http/ngx_http_write_filter_module.c b/src/http/ngx_http_write_filter_module.c
index 00362315..316cc01e 100644
--- a/src/http/ngx_http_write_filter_module.c
+++ b/src/http/ngx_http_write_filter_module.c
@@ -12,6 +12,9 @@
 
 static ngx_int_t ngx_http_write_filter_init(ngx_conf_t *cf);
 
+#if (T_NGX_REQ_STATUS )
+ngx_int_t (*ngx_http_write_filter_stat)(ngx_http_request_t *r) = NULL;
+#endif
 
 static ngx_http_module_t  ngx_http_write_filter_module_ctx = {
     NULL,                                  /* preconfiguration */
@@ -251,6 +254,14 @@ ngx_http_write_filter(ngx_http_request_t *r, ngx_chain_t *in)
     ngx_log_debug1(NGX_LOG_DEBUG_HTTP, c->log, 0,
                    "http write filter limit %O", limit);
 
+#if (T_NGX_REQ_STATUS )
+    if (ngx_http_write_filter_stat != NULL) {
+        if (ngx_http_write_filter_stat(r) == NGX_ERROR) {
+            return NGX_ERROR;
+        }
+    }
+#endif
+
     chain = c->send_chain(c, r->out, limit);
 
     ngx_log_debug1(NGX_LOG_DEBUG_HTTP, c->log, 0,
diff --git a/auto/modules b/auto/modules
index 73a9bae9..c087c452 100644
--- a/auto/modules
+++ b/auto/modules
@@ -1398,3 +1398,5 @@ cat << END                                    >> $NGX_MODULES_C
 };

 END
+
+have=T_NGX_INPUT_BODY_FILTER . auto/have
